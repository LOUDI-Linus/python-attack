模块： 一个python文件
        在模块中可以写需要的任何代码
包：   一个python目录
        目录是用来组织项目结构，项目看起来更清晰

要求：
    并不任何一个python文件/目录都可以作为模块/包
    文件/目录的命名符合标识符的命名规范（包含字母数字下划线，不能以数字开头）

要求：!!!!!!!!!!!
1. 只能导入【包】中的模块/子包
2. python会自动识别一个目录是不是一个包
3. 相对于当前被执行的文件而言
    a. 当前执行的文件所在的目录（及上层目录）不是一个包
    b. 子目录及子子目录都是包
4.识别.或者..代表的目录是不是一个包

如果一个项目有2W行代码，到底是拆分成多个文件，还是放到一个文件中呢？
拆分成多个文件会更好！
一眼就看清功能结构，日志、权限管理（1000）
2w行中找到1000行

模块的作用 => 跟函数等同 => 结构清晰、减少重复代码、增强可维护性


* 封装函数的时候，不要使用全局变量
* 编写模块的时候，函数中不要使用全局变量
* import my_module


包 => 一个目录
py2 => 包中一个要包含一个__init__.py文件 => 文件可以为空
py3 => __init__.py可选 （一般包含）

模块和包命名注意：
1. 文件/目录的命名符合标识符的命名规范（包含字母数字下划线，不能以数字开头）
2. 模块和包 不要跟标准库/三方同名 => 导入有可能导入出错的情况

字节码文件过期 =>
    生成pyc文件的时候, 会记录源文件的修改时间,如果源文件发生过
    修改,那么下次导入的时候,重新生成pyc文件


a.py
print("123")
print("124")

__pycache__/a.cpython-38.pyc  => 打印"123"


b.py
import a



如果想使用别人写好的模块/包，如何做的？
    方法1：pip install xxxx
    方法2：下载源码安装
          解压压缩包 => setup.py
          切换到解压目录： cd
          python setup.py install

    查看： pip list
          import jinja-ab

    拷贝 => 放到哪里？=> 在任意一个位置都能直接导入
            如果项目，有依赖怎么办？ 安装依赖

    拷贝可行，不是最佳方案！
    pip install model
    python setup.py install
    -> 安装到可以直接导入的目录、依赖都自动安装、piplist看到/pip uninstall 卸载




我自己写好了好用的模块/包 => 分享给别人？

docs -> 文档
example -> 一些使用范例
src -> 源码
    pack01
        __init__.py
        model01.py
    pack02
        model02.py
    model.py
tests -> 测试用例
setup.py


# 创建setup.py 编写安装参数
# 检查配置是不是正确
  python setup.py check
# python setup.py sdist  => 生成源码包 => 给别人用的 => dist目录下


# 安装
解压文件 => 切换解压目录 => python setup.py install

# 测试
import model
from pack01 import model01
from pack02 import model02
# import pack01

# pack01.model01 => 出错



